---
import type { ComponentProps } from 'astro/types'
import SimpleCtaSection, { SimpleCtaSection_Query } from '@/components/global/SimpleCtaSection.astro'
import SplitContentImageGrid, { SplitContentImageGrid_Query } from '@/components/global/SplitContentImageGrid.astro'
import SimpleHeadingFullImage, { SimpleHeadingFullImage_Query } from '@/components/global/SimpleHeadingFullImage.astro'
import FeatureAccordionSection, {
  FeatureAccordionSection_Query,
} from '@/components/global/FeatureAccordionSection.astro'
import CtaSectionWithShapedImage, {
  CtaSectionWithShapedImage_Query,
} from '@/components/global/CtaSectionWithShapedImage.astro'
import ServicesOverview, { ServicesOverview_Query } from '@/components/global/ServicesOverview.astro'
import MetricsSection, { MetricsSection_Query } from '@/components/global/MetricsSection.astro'
import Faq, { Faq_Query } from '@/components/global/Faq.astro'

const components = {
  SimpleCtaSection,
  SplitContentImageGrid,
  SimpleHeadingFullImage,
  FeatureAccordionSection,
  CtaSectionWithShapedImage,
  ServicesOverview,
  MetricsSection,
  Faq,
}

type ComponentsMap = {
  [Component in keyof typeof components]: {
    _type: Component
  } & ComponentProps<(typeof components)[Component]>
}

export type ComponentsProps = Array<ComponentsMap[keyof typeof components]>

type Props = {
  data: ComponentsProps
  indexStart?: number
}

const { data, indexStart = 0 } = Astro.props

export const Components_Query = /* groq */ `
  components[] {
    _type,
    _type == "SimpleCtaSection" => ${SimpleCtaSection_Query}
    _type == "SplitContentImageGrid" => ${SplitContentImageGrid_Query}
    _type == "SimpleHeadingFullImage" => ${SimpleHeadingFullImage_Query}
    _type == "FeatureAccordionSection" => ${FeatureAccordionSection_Query}
    _type == "CtaSectionWithShapedImage" => ${CtaSectionWithShapedImage_Query}
    _type == "ServicesOverview" => ${ServicesOverview_Query}
    _type == "MetricsSection" => ${MetricsSection_Query}
    _type == "Faq" => ${Faq_Query}
  },
`
---

{
  data?.map((item, i) => {
    const DynamicComponent = components[item._type] as any
    if (!DynamicComponent) return null
    return <DynamicComponent {...item} index={indexStart + i} />
  })
}
