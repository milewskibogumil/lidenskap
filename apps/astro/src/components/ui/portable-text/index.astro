---
import type { HTMLAttributes } from 'astro/types'
import { PortableText } from 'astro-portabletext'
import type { PortableTextProps } from 'astro-portabletext/types'
import Mark from './Mark.astro'
import Block from './Block.astro'

export type PortableTextValue = PortableTextProps['value']

type Props = {
  value: PortableTextValue
  heading?: 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'
} & HTMLAttributes<'div' | 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6'>

const { heading: HeadingTag, value, ...props } = Astro.props

const valueArray = Array.isArray(value) ? value : [value]
---

{
  HeadingTag ? (
    <HeadingTag {...props}>
      {valueArray.map((value: PortableTextValue, index: number) =>
        index > 0 ? (
          <span {...props}>{<PortableText value={value} components={{ block: Block, mark: Mark }} />}</span>
        ) : (
          <PortableText value={value} components={{ block: Block, mark: Mark }} />
        )
      )}
    </HeadingTag>
  ) : (
    <div {...props}>
      <PortableText value={value} components={{ mark: Mark }} />
    </div>
  )
}
