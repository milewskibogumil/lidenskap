---
import PortableText, { PortableTextQuery, type PortableTextValue } from '@/components/ui/portable-text'
import Button, { ButtonDataQuery, type ButtonDataProps } from '@/src/components/ui/Button'
import Image, { ImageDataQuery, type ImageDataProps } from '@/src/components/ui/Image'

export const SimpleHeadingFullImage_Query = `
  _type == "SimpleHeadingFullImage" => {
    ${PortableTextQuery('heading')}
    ${PortableTextQuery('paragraph')}
    ${ButtonDataQuery('cta')}
    ${ImageDataQuery('image')}
  },
`

export type Props = {
  index: number
  heading: PortableTextValue
  paragraph: PortableTextValue
  cta: ButtonDataProps
  image: ImageDataProps
}

const { index, heading, paragraph, cta, image } = Astro.props
---

<section class="SimpleHeadingFullImage">
  <header>
    <PortableText value={heading} heading={index === 0 ? 'h1' : 'h2'} />
    <div>
      <PortableText value={paragraph} />
      <Button {...cta} className="cta" />
    </div>
  </header>
  <div class="image">
    <Image {...image} sizes="100vw" priority={index === 0} />
  </div>
</section>

<style lang="scss">
  .SimpleHeadingFullImage {
    padding: clamp(3rem, calc(4vw / 0.48), 5rem) 0;
    header {
      margin-bottom: clamp(calc(64rem / 16), calc(64vw / 7.68), calc(80rem / 16));
      display: grid;
      gap: clamp(calc(24rem / 16), calc(32vw / 7.68), calc(32rem / 16))
        clamp(calc(64rem / 16), calc(64vw / 7.68), calc(132rem / 16));
      grid-template-columns: 1fr 1.2fr;
      @media (max-width: calc(899rem / 16)) {
        grid-template-columns: 1fr;
        max-width: calc(643rem / 16);
      }
      .cta {
        margin-top: clamp(calc(24rem / 16), calc(32vw / 7.68), calc(32rem / 16));
      }
    }
    .image {
      overflow: clip;
      margin: 0 calc(var(--page-margin) * -1);
      img {
        @supports (animation-timeline: view()) {
          animation: scroll-image linear forwards;
          animation-timeline: view();
          transform-origin: center;
          @keyframes scroll-image {
            from {
              transform: translateY(-8%) scale(1.16);
            }
            to {
              transform: translateY(0%) scale(1);
            }
          }
        }
      }
    }
  }
</style>
